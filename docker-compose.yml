version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: percentile_app
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/survey_db
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - NEXT_WEBPACK_USEPOLLING=true
    volumes:
      - .:/app:cached
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 6G
    restart: unless-stopped

  studio:
    image: node:20-alpine
    container_name: prisma_studio
    working_dir: /app
    command: >
      sh -c "npm install -g prisma@latest &&
             npx prisma generate &&
             npx prisma studio --port 5556 --hostname 0.0.0.0"
    ports:
      - "5556:5556"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/survey_db
      - NODE_OPTIONS="--max-old-space-size=4096"
    volumes:
      - .:/app:cached
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    restart: unless-stopped

  postgres:
    image: postgres:17.4-alpine
    container_name: survey_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: survey_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: survey_cache
    command: redis-server --maxmemory 1024mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 